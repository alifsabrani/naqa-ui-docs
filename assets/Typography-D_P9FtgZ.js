import{c as x}from"./index-Cxy1aMCg.js";import{R as f}from"./iframe-DEDSHorF.js";const h="_typography_1uly8_11",T="_textDisplay_1uly8_23",v="_textH0_1uly8_25",S="_textH1_1uly8_27",B="_textH2_1uly8_29",C="_textXl_1uly8_87",A="_textLg_1uly8_89",M="_textMd_1uly8_91",W="_textSm_1uly8_93",L="_textXs_1uly8_95",b="_iconXl_1uly8_155",R="_iconLg_1uly8_163",H="_iconMd_1uly8_171",P="_iconSm_1uly8_179",X="_fontWeightRegular_1uly8_189",w="_fontWeightMedium_1uly8_197",D="_fontWeightSemibold_1uly8_205",N="_fontWeightBold_1uly8_213",q="_colorBrandPrimary_1uly8_223",k="_colorBrandSecondary_1uly8_231",E="_colorBrandWarning_1uly8_239",I="_colorBrandError_1uly8_247",J="_colorBrandInfo_1uly8_255",j="_colorBrandSuccess_1uly8_263",z="_colorBrandLight_1uly8_271",F="_colorBrandDark_1uly8_279",V="_textColorPrimary_1uly8_289",G="_textColorSecondary_1uly8_297",K="_textColorMuted_1uly8_305",O="_fontTypeSans_1uly8_315",Q="_fontTypeSerif_1uly8_323",U="_fontTypeDisplay_1uly8_331",Y="_fontTypeMono_1uly8_339",Z="_textAlignLeft_1uly8_347",$="_textAlignCenter_1uly8_353",ee="_textAlignRight_1uly8_359",te="_textAlignJustify_1uly8_365",e={typography:h,textDisplay:T,textH0:v,textH1:S,textH2:B,textXl:C,textLg:A,textMd:M,textSm:W,textXs:L,iconXl:b,iconLg:R,iconMd:H,iconSm:P,fontWeightRegular:X,fontWeightMedium:w,fontWeightSemibold:D,fontWeightBold:N,colorBrandPrimary:q,colorBrandSecondary:k,colorBrandWarning:E,colorBrandError:I,colorBrandInfo:J,colorBrandSuccess:j,colorBrandLight:z,colorBrandDark:F,textColorPrimary:V,textColorSecondary:G,textColorMuted:K,fontTypeSans:O,fontTypeSerif:Q,fontTypeDisplay:U,fontTypeMono:Y,textAlignLeft:Z,textAlignCenter:$,textAlignRight:ee,textAlignJustify:te},ne={display:"h1",h0:"h1",h1:"h1",h2:"h2",xl:"p",lg:"p",md:"p",sm:"p",xs:"p","icon-xl":"span","icon-lg":"span","icon-md":"span","icon-sm":"span"},oe={display:e.textDisplay,h0:e.textH0,h1:e.textH1,h2:e.textH2,xl:e.textXl,lg:e.textLg,md:e.textMd,sm:e.textSm,xs:e.textXs,"icon-xl":e.iconXl,"icon-lg":e.iconLg,"icon-md":e.iconMd,"icon-sm":e.iconSm},le={regular:e.fontWeightRegular,medium:e.fontWeightMedium,semibold:e.fontWeightSemibold,bold:e.fontWeightBold},re={textPrimary:e.textColorPrimary,textSecondary:e.textColorSecondary,muted:e.textColorMuted,primary:e.colorBrandPrimary,secondary:e.colorBrandSecondary,warning:e.colorBrandWarning,error:e.colorBrandError,info:e.colorBrandInfo,success:e.colorBrandSuccess,light:e.colorBrandLight,dark:e.colorBrandDark},ae={sans:e.fontTypeSans,serif:e.fontTypeSerif,display:e.fontTypeDisplay,mono:e.fontTypeMono},ie={left:e.textAlignLeft,right:e.textAlignRight,center:e.textAlignCenter,justify:e.textAlignJustify},se=({variant:t,children:a,as:i,className:s,fontWeight:n,color:o="textPrimary",fontType:l,align:r,...c})=>{const d=i||ne[t]||"span",m=oe[t],u=n?le[n]:null,y=o?re[o]:null,p=l?ae[l]:null,_=r?ie[r]:null,g=x(e.typography,m,u,y,p,_,s);return f.createElement(d,{...c,className:g},a)};se.__docgenInfo={description:'A reusable Typography component that enforces consistent text styling.\r\nThis component is a generic function that correctly infers the props of the `as` element.\r\n@example\r\n```tsx\r\n<Typography variant="display" color="primary">Alif Sabrani</Typography>\r\n```',methods:[],displayName:"Typography",props:{variant:{required:!0,tsType:{name:"union",raw:`| 'display'\r
| 'h0'\r
| 'h1'\r
| 'h2'\r
| 'xl'\r
| 'lg'\r
| 'md'\r
| 'sm'\r
| 'xs'\r
| 'icon-xl'\r
| 'icon-lg'\r
| 'icon-md'\r
| 'icon-sm'`,elements:[{name:"literal",value:"'display'"},{name:"literal",value:"'h0'"},{name:"literal",value:"'h1'"},{name:"literal",value:"'h2'"},{name:"literal",value:"'xl'"},{name:"literal",value:"'lg'"},{name:"literal",value:"'md'"},{name:"literal",value:"'sm'"},{name:"literal",value:"'xs'"},{name:"literal",value:"'icon-xl'"},{name:"literal",value:"'icon-lg'"},{name:"literal",value:"'icon-md'"},{name:"literal",value:"'icon-sm'"}]},description:"The predefined typography style to apply. This also determines the default semantic HTML tag."},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content to be rendered inside the component."},as:{required:!1,tsType:{name:"React.JSX.IntrinsicElements"},description:"An optional prop to override the default HTML tag. For example, to use an h3 tag for an h1-sized heading."},className:{required:!1,tsType:{name:"string"},description:"An optional CSS class name to be merged with the component's default class name."},fontWeight:{required:!1,tsType:{name:"union",raw:"'regular' | 'medium' | 'semibold' | 'bold'",elements:[{name:"literal",value:"'regular'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'semibold'"},{name:"literal",value:"'bold'"}]},description:"An optional prop to override the default font weight."},color:{required:!1,tsType:{name:"union",raw:`| 'textPrimary'\r
| 'textSecondary'\r
| 'muted'\r
| 'primary'\r
| 'secondary'\r
| 'warning'\r
| 'error'\r
| 'info'\r
| 'success'\r
| 'light'\r
| 'dark'`,elements:[{name:"literal",value:"'textPrimary'"},{name:"literal",value:"'textSecondary'"},{name:"literal",value:"'muted'"},{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'warning'"},{name:"literal",value:"'error'"},{name:"literal",value:"'info'"},{name:"literal",value:"'success'"},{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"A single prop to set the text color, including brand, status, and hierarchy colors.",defaultValue:{value:"'textPrimary'",computed:!1}},fontType:{required:!1,tsType:{name:"union",raw:"'sans' | 'serif' | 'display' | 'mono'",elements:[{name:"literal",value:"'sans'"},{name:"literal",value:"'serif'"},{name:"literal",value:"'display'"},{name:"literal",value:"'mono'"}]},description:"An optional prop to set the font family."},align:{required:!1,tsType:{name:"union",raw:"'left' | 'center' | 'right' | 'justify'",elements:[{name:"literal",value:"'left'"},{name:"literal",value:"'center'"},{name:"literal",value:"'right'"},{name:"literal",value:"'justify'"}]},description:'An optional prop to set text alignment.\r\nSupports common CSS `text-align` values such as `"left"`, `"center"`, `"right"`, and `"justify"`.'}}};export{se as T};
